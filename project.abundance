{
    "atomType": "Molecule",
    "name": "Shell",
    "x": 0,
    "y": 0,
    "uniqueID": 1738957450996,
    "ioValues": [],
    "description": "Molecules provide an organizational structure to contain atoms. Double click on a molecule to enter it. Use the up arrow in the upper right hand corner of the screen to go up one level.",
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": 1738957460224,
            "ioValues": [
                {
                    "name": "number or geometry",
                    "ioValue": 1738957613551
                }
            ],
            "description": "Connect geometry here to make it available in the next level up. "
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.4748677248677248,
            "y": 0.39275766016713093,
            "uniqueID": 1738957504841,
            "ioValues": [
                {
                    "name": "inputShape",
                    "ioValue": 1738957513523
                },
                {
                    "name": "dist",
                    "ioValue": 10
                },
                {
                    "name": "height",
                    "ioValue": 10
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": " \n      //Inputs:[inputShape, dist, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      //Takes the address and gets the shape from the library\n      let importedShape = library[inputShape]\n      \n      //This makes a new copy of of the shape (to prevent garbage collection issues),\n      //and moves it in the X direction. Note that this will not work if the input is an assembly\n      let movedShape = importedShape.geometry[0].clone().shell(5, (f) => f.inPlane(\"XY\", 20));\n      \n      //Console.log works for debugging to better see what is happening under the hood\n      console.log(\"Shape:\")\n      console.log(importedShape);\n      \n      //Shapes stored in the library have tags, a color, a plane, and a bill of materials like this. We don't modify them here\n      let shape1 = {\n        geometry: [movedShape],\n        tags: importedShape.tags,\n        color: importedShape.color,\n        plane: importedShape.plane,\n        bom: importedShape.bom\n      }\n      \n      //We could at this point return shape1 as a complete shape and it will be automatically written to the library for us\n      //return shape1\n      \n      //We can also create a new shape from scratch\n      let createdRectangle = replicad.drawRectangle(5,7)\n      //This is the plane we are going to put our new shape on\n      const newPlane = new Plane().pivot(0, 'Y');\n      //And we extrude the shape to make it 3D\n      let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [createdShape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      //Then we can return our created shape in just the same way\n      //return shape2\n      \n      //If we want to return both shapes at once, we can create an assembly with them\n      let anAssembly = {\n        geometry: [shape1, shape2], \n        tags: [\"aNewTag\"],\n        color: '#A3CF5B',\n        plane: newPlane,\n        bom: []\n      }\n      \n      //And we can return that in the same way\n      return anAssembly\n      \n      \n          /**\n          To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n          If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n          Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n          https://replicad.xyz/docs/introapp/UserGuide.html \n          Return a replicad object that includes geometry, color, tags and plane. \n      \n      \n          Example Code Atom:\n      \n            Inputs:[shape, x];\n      \n            let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n      \n            return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      \n            - See more examples at _______ \n      \n      \n          */\n      "
        },
        {
            "atomType": "Circle",
            "name": "Circle",
            "x": 0.16203703703703703,
            "y": 0.49860724233983283,
            "uniqueID": 1738957510144,
            "ioValues": [
                {
                    "name": "diameter",
                    "ioValue": 40
                }
            ],
            "description": "Creates a new circle."
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.28439153439153436,
            "y": 0.6768802228412256,
            "uniqueID": 1738957513523,
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": 1738957510144
                },
                {
                    "name": "height",
                    "ioValue": 30
                }
            ],
            "description": "Extrudes a 2D shape. Input can be negitive. "
        },
        {
            "atomType": "Rectangle",
            "name": "Rectangle",
            "x": 0.4424603174603175,
            "y": 0.7743732590529249,
            "uniqueID": 1738957587248,
            "ioValues": [
                {
                    "name": "x length",
                    "ioValue": 100
                },
                {
                    "name": "y length",
                    "ioValue": 100
                }
            ],
            "description": "Creates a new rectangle."
        },
        {
            "atomType": "Move",
            "name": "Move",
            "x": 0.5687830687830687,
            "y": 0.7465181058495821,
            "uniqueID": 1738957595555,
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": 1738957587248
                },
                {
                    "name": "xDist",
                    "ioValue": 0
                },
                {
                    "name": "yDist",
                    "ioValue": 0
                },
                {
                    "name": "zDist",
                    "ioValue": 10
                }
            ],
            "description": "Moves a shape laterally in X, Y, Z."
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.6865079365079365,
            "y": 0.7548746518105849,
            "uniqueID": 1738957606257,
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": 1738957595555
                },
                {
                    "name": "height",
                    "ioValue": 100
                }
            ],
            "description": "Extrudes a 2D shape. Input can be negitive. "
        },
        {
            "atomType": "Difference",
            "name": "Difference",
            "x": 0.759920634920635,
            "y": 0.3899721448467966,
            "uniqueID": 1738957613551,
            "ioValues": [
                {
                    "name": "geometry2",
                    "ioValue": 1738957606257
                },
                {
                    "name": "geometry1",
                    "ioValue": 1738957504841
                }
            ],
            "description": "Subtracts shape two from shape one."
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry1",
            "ap2Primary": false,
            "ap1ID": 1738957504841,
            "ap2ID": 1738957613551
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap2Primary": true,
            "ap1ID": 1738957510144,
            "ap2ID": 1738957513523
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "inputShape",
            "ap2Primary": false,
            "ap1ID": 1738957513523,
            "ap2ID": 1738957504841
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap2Primary": true,
            "ap1ID": 1738957587248,
            "ap2ID": 1738957595555
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap2Primary": true,
            "ap1ID": 1738957595555,
            "ap2ID": 1738957606257
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry2",
            "ap2Primary": false,
            "ap1ID": 1738957606257,
            "ap2ID": 1738957613551
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": 1738957613551,
            "ap2ID": 1738957460224
        }
    ],
    "unitsKey": "MM",
    "fileTypeVersion": 1,
    "compiledBom": [],
    "filetypeVersion": 1
}